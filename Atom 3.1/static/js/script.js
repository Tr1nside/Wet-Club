const body = document.body;
const nightModeButton = document.querySelector('.night-mode');
const tabs = document.querySelector('.tabs');
let tabCounter = 2; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫
const consoleOutput = document.querySelector('.console-output');
const consoleInput = document.querySelector('.console-input');
let codeMirrorInstances = {};
const socket = io();


consoleInput.addEventListener('focus', () => {
    if (consoleInput.readOnly) {
        consoleInput.blur(); // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å, –µ—Å–ª–∏ –ø–æ–ª–µ readonly
    }
});

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
consoleInput.readOnly = true;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ consoleInput
function updateConsoleInputClass() {
    if (consoleInput.readOnly) {
        consoleInput.classList.remove('console-input-active');
    } else {
        consoleInput.classList.add('console-input-active');
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞
updateConsoleInputClass();

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function simulateServerRequest() {
    consoleOutput.value += "\n–°–µ—Ä–≤–µ—Ä: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:";
    consoleInput.readOnly = false;
    updateConsoleInputClass();
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
document.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
        simulateServerRequest();
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
let darkMode = false;

if (!localStorage.getItem("darkMod")) {
    localStorage.setItem("darkMod", false);
    darkMode = false;
} else {
    darkMode = localStorage.getItem("darkMod");
    if (darkMode) {
        body.classList.toggle('dark-mode');
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –ª—É–Ω—ã –Ω–∞ —Å–æ–ª–Ω—Ü–µ –∏ –æ–±—Ä–∞—Ç–Ω–æ
        nightModeButton.textContent = body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã CodeMirror –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        for (const tabId in codeMirrorInstances) {
            const cm = codeMirrorInstances[tabId];
            cm.setOption("theme", body.classList.contains('dark-mode') ? "dracula" : "default");
        }
    }
}

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —Ç–µ–º–∞ –≤ localStorage
const storedTheme = localStorage.getItem('theme');
if (storedTheme === 'dark') {
    body.classList.add('dark-mode');
    nightModeButton.textContent = '‚òÄÔ∏è';
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", "dracula");
    }
} else {
    body.classList.remove('dark-mode');
    nightModeButton.textContent = 'üåô';
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", "default");
    }
}

nightModeButton.addEventListener('click', () => {
    body.classList.toggle('dark-mode');
    const isDark = body.classList.contains('dark-mode');
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –ª—É–Ω—ã –Ω–∞ —Å–æ–ª–Ω—Ü–µ –∏ –æ–±—Ä–∞—Ç–Ω–æ
    nightModeButton.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã –≤ localStorage
    localStorage.setItem('theme', isDark ? 'dark' : 'light');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã CodeMirror –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    for (const tabId in codeMirrorInstances) {
        const cm = codeMirrorInstances[tabId];
        cm.setOption("theme", isDark ? "dracula" : "default");
    }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
function updateLineNumbers(cm, lineNumbers) {
    const numberOfLines = cm.lineCount();
    let numbers = "";
    for (let i = 1; i <= numberOfLines; i++) {
        numbers += i + "<br>";
    }
    lineNumbers.innerHTML = numbers;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function createNewTab() {
    tabCounter++;
    const newTabId = `tab${tabCounter}`;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    const newTab = document.createElement('div');
    newTab.classList.add('tab');
    newTab.dataset.tab = newTabId;
    newTab.innerHTML = `<span>file${tabCounter - 1}.py</span><span class="close-tab">√ó</span>
                            <input type="text" class="tab-input" value="file${tabCounter - 1}.py">`;
    tabs.insertBefore(newTab, document.querySelector('.tab[data-tab="tab2"]'));

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è CodeMirror
    const codeArea = document.createElement('div');
    codeArea.classList.add('code-area');
    codeArea.dataset.tabContent = newTabId;
    document.querySelector('.container').insertBefore(codeArea, document.querySelector('.toolbar'));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CodeMirror
    const cm = CodeMirror(codeArea, {
        mode: "python",
        theme: body.classList.contains('dark-mode') ? "dracula" : "default",
        lineNumbers: true,
        gutters: ["CodeMirror-linenumbers"]
    });

    codeMirrorInstances[newTabId] = cm;

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    activateTab(newTab);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
    newTab.addEventListener('dblclick', function () {
        startEditingTab(this);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ —Å input
    const inputElement = newTab.querySelector('.tab-input');
    inputElement.addEventListener('blur', function () {
        finishEditingTab(newTab);
    });
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter
    inputElement.addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            finishEditingTab(newTab);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏
function activateTab(tab) {
    const tabId = tab.dataset.tab;

    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.code-area[data-tab-content]').forEach(content => {
        content.style.display = 'none';
    });

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    tab.classList.add('active');
    const codeArea = document.querySelector(`.code-area[data-tab-content="${tabId}"]`);
    codeArea.style.display = 'block';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã CodeMirror
    if (codeMirrorInstances[tabId]) {
        codeMirrorInstances[tabId].refresh();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
function closeTab(tab) {
    const tabId = tab.dataset.tab;

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const tabElement = document.querySelector(`.tab[data-tab="${tabId}"]`);
    const codeAreaElement = document.querySelector(`.code-area[data-tab-content="${tabId}"]`);

    // –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    tabElement.remove();
    codeAreaElement.remove();

    // –£–¥–∞–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CodeMirror, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (codeMirrorInstances[tabId]) {
        //codeMirrorInstances[tabId].toTextArea(); // –ù–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –Ω–µ—Ç textarea
        delete codeMirrorInstances[tabId];
    }

    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (tab.classList.contains('active')) {
        const firstTab = document.querySelector('.tab:not([data-tab="tab2"])');
        if (firstTab) {
            activateTab(firstTab);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
function startEditingTab(tab) {
    tab.classList.add('editing');
    const inputElement = tab.querySelector('.tab-input');
    inputElement.style.display = 'block';
    inputElement.focus();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
function finishEditingTab(tab) {
    tab.classList.remove('editing');
    const inputElement = tab.querySelector('.tab-input');
    const spanElement = tab.querySelector('span');
    spanElement.textContent = inputElement.value;
    inputElement.style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tabs.addEventListener('click', (event) => {
    const tab = event.target.closest('.tab');
    if (!tab) return;
    
    if (event.target.classList.contains('close-tab')) {
        closeTab(tab);
        return;
    }

    if (tab.dataset.tab === 'tab2') { // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ "+", —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        createNewTab();
    } else {
        activateTab(tab);
    }
});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
tabs.addEventListener('dblclick', (event) => {
    if (event.target.classList.contains('tab') && event.target.dataset.tab !== 'tab2') {
        startEditingTab(event.target);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ CodeMirror
const initialTab = document.querySelector('.tab[data-tab="tab1"]');
const initialCodeArea = document.querySelector('.code-area[data-tab-content="tab1"]');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CodeMirror
const cm = CodeMirror(initialCodeArea, {
    mode: "python",
    theme: body.classList.contains('dark-mode') ? "dracula" : "default",
    lineNumbers: true,
    gutters: ["CodeMirror-linenumbers"]
});

codeMirrorInstances['tab1'] = cm;
activateTab(initialTab);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
initialTab.addEventListener('dblclick', function () {
    startEditingTab(this);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ —Å input
const initialInputElement = initialTab.querySelector('.tab-input');
initialInputElement.addEventListener('blur', function () {
    finishEditingTab(initialTab);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter
initialInputElement.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') {
        finishEditingTab(initialTab);
    }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö –≤ localStorage
function saveTabsToLocalStorage() {
    const tabsData = [];
    document.querySelectorAll('.tab:not([data-tab="tab2"])').forEach(tab => {
        const tabId = tab.dataset.tab;
        const fileName = tab.querySelector('span').textContent;
        const content = codeMirrorInstances[tabId] ? codeMirrorInstances[tabId].getValue() : "";
        tabsData.push({ id: tabId, name: fileName, content: content });
    });
    localStorage.setItem('savedTabs', JSON.stringify(tabsData));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∏–∑ localStorage
function loadTabsFromLocalStorage() {
    const savedTabs = JSON.parse(localStorage.getItem('savedTabs')) || [];
    if (savedTabs.length === 0) return;

    document.querySelectorAll('.tab:not([data-tab="tab2"])').forEach(tab => tab.remove());
    document.querySelectorAll('.code-area[data-tab-content]').forEach(area => area.remove());
    codeMirrorInstances = {};

    savedTabs.forEach((tabData, index) => {
        const newTab = document.createElement('div');
        newTab.classList.add('tab');
        newTab.dataset.tab = tabData.id;
        newTab.innerHTML = `<span>${tabData.name}</span><span class="close-tab">√ó</span>
                            <input type="text" class="tab-input" value="${tabData.name}">`;
        tabs.insertBefore(newTab, document.querySelector('.tab[data-tab="tab2"]'));

        const codeArea = document.createElement('div');
        codeArea.classList.add('code-area');
        codeArea.dataset.tabContent = tabData.id;
        document.querySelector('.container').insertBefore(codeArea, document.querySelector('.toolbar'));

        const cm = CodeMirror(codeArea, {
            mode: "python",
            theme: body.classList.contains('dark-mode') ? "dracula" : "default",
            lineNumbers: true,
            gutters: ["CodeMirror-linenumbers"]
        });
        cm.setValue(tabData.content);
        codeMirrorInstances[tabData.id] = cm;

        newTab.addEventListener('dblclick', function () { startEditingTab(this); });
        const inputElement = newTab.querySelector('.tab-input');
        inputElement.addEventListener('blur', function () { finishEditingTab(newTab); });
        inputElement.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') finishEditingTab(newTab);
        });
    });

    activateTab(document.querySelector('.tab:not([data-tab="tab2"])'));
}

// –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
window.addEventListener('load', loadTabsFromLocalStorage);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
window.addEventListener('beforeunload', saveTabsToLocalStorage);
document.addEventListener('input', saveTabsToLocalStorage);
document.addEventListener('click', saveTabsToLocalStorage);

// –û—Ç—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
function clearConsole() {
    localStorage.setItem("console", '')
    consoleOutput.value = "";
    consoleInput.classList.remove('console-input-active');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function executeCode() {
    clearConsole();  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const activeTab = document.querySelector('.tab.active');
    if (!activeTab) {
        consoleOutput.value += "\n–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä CodeMirror
    const tabId = activeTab.dataset.tab;
    const activeEditor = codeMirrorInstances[tabId];

    if (!activeEditor) {
        consoleOutput.value += "\n–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.";
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const code = activeEditor.getValue();
    socket.emit('execute', code);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
}

function appendToConsole(text) {
    consoleOutput.innerText += text;  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    consoleOutput.scrollTop = consoleDiv.scrollHeight;  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –≤–Ω–∏–∑
    }
